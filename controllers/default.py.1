def index():
    message='Code Spardha'
    #form = SQLFORM(db.ocj_user_login).process()
    return locals()

def contests():
    # This page will shoes the current running contests
    rows = db(db.ocj_contests).select()
    return locals()

def contestpage():
    #This page will show the running contest problems
    contestRequested = request.args(0,cast=int)
    tableName = "db.ocj_contests_questions_" + str(contestRequested)
    rows = db(db.ocj_contests_questions_1).select()
    return rows

@auth.requires_membership('host_admin')
def manage():
    grid = SQLFORM.grid(db.ocj_contests)
    return locals()

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    http://..../[app]/default/user/bulk_register
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()
