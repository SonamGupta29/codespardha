(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> 'NoneType' object has no attribute '__getitem__'"
p3
sS'layer'
p4
S'/home/md/Documents/Scripting/projWeb2py/web2py/web2py/applications/code_gb/controllers/default.py'
p5
sS'code'
p6
S'import os\n\n\n\n@auth.requires_login()\ndef index():\n    message=\'Code Spardha\'\n    session.userName = db(db.auth_user == auth.user_id).select(db.auth_user.first_name)[0].first_name\n\n    activity = db(db.ocj_contests_log.userID == auth.user_id).select(orderby=~db.ocj_contests_log.submissionTime)[:3]\n\n    submissionCount = len(db(db.ocj_contests_log.userID == auth.user_id).select())\n\n    successfulCount = len(db((db.ocj_contests_log.userID == auth.user_id) & (db.ocj_contests_log.submissionResult=="Passed")).select())\n\n    wrongAnswerCount = len(db((db.ocj_contests_log.userID == auth.user_id) & (db.ocj_contests_log.submissionResult=="Wrong Answer")).select())\n    compileErrorCount = len(db((db.ocj_contests_log.userID == auth.user_id) & (db.ocj_contests_log.submissionResult=="Compile Error")).select())\n    TLECount = len(db((db.ocj_contests_log.userID == auth.user_id) & (db.ocj_contests_log.submissionResult=="Time Limit Exceeded")).select())\n    #form = SQLFORM(db.ocj_user_login).process()\n    return locals()\n\n@auth.requires_login()\ndef showTimeline():\n    activity = db(db.ocj_contests_log.userID == auth.user_id).select(orderby=~db.ocj_contests_log.submissionTime)\n    return locals()\n\n\n\ndef home():\n    message=\'Code Spardha\'\n    #form = SQLFORM(db.ocj_user_login).process()\n    return locals()\n\ndef contests():\n    # This page will shoes the current running contests\n    runningContests = db((db.ocj_contests.startTime < request.now)& \\\n                         (db.ocj_contests.endTime > request.now)).select()\n\n    upcomingContest = db(db.ocj_contests.startTime > request.now).select()\n\n    return locals()\n\n\n@auth.requires_login()\ndef contestpage():\n    #This page will show the running contest problems\n\n    #Get the contest name\n    for f in db(db.ocj_contests.id == int(request.args[0])).select():\n        cName = f.contestName\n\n    # Get the current problems and show it to user\n    rows = db(db.ocj_contests_questions.contestID == int(request.args[0])).select()\n\n    # This will return the all the submission of the current contest\n    logs = db(db.ocj_contests_log.contestID == int(request.args[0])).select(orderby=~db.ocj_contests_log.submissionTime)\n\n    success = 10\n    attempted = 1000\n\n    return locals()\n\n\n\n@auth.requires_login()\ndef challenges():\n\n    session.isFromChallengesPage = 1\n    #This function will display the question text\n    for f in db(db.ocj_contests_questions.id == request.args[0]).select():\n        QuestionText = f.questionText\n        QuestionName = f.questionName\n\n    #Set the current time stamp\n    db.ocj_contests_log.submissionTime.default = request.now\n    db.ocj_contests_log.submissionTime.writable = False\n    db.ocj_contests_log.submissionTime.readable = False\n\n    #Set the current logged in user\n    db.ocj_contests_log.userID.default = auth.user_id\n    db.ocj_contests_log.userID.writable = False\n    db.ocj_contests_log.userID.readable = False\n\n    #Set the current contest id\n    db.ocj_contests_log.contestID.default = request.args[0]\n    db.ocj_contests_log.contestID.writable = False\n    db.ocj_contests_log.contestID.readable = False\n\n    #Set the current question no\n    db.ocj_contests_log.questionNumber.default = request.args[1]\n    db.ocj_contests_log.questionNumber.writable = False\n    db.ocj_contests_log.questionNumber.readable = False\n\n    #Set the current Submission result as evaluating\n    db.ocj_contests_log.submissionResult.default = \'Evaluating\'\n    db.ocj_contests_log.submissionResult.writable = False\n    db.ocj_contests_log.submissionResult.readable = False\n\n    #Set the current Submission result as evaluating\n    db.ocj_contests_log.questionName.default = request.args[2]\n    db.ocj_contests_log.questionName.writable = False\n    db.ocj_contests_log.questionName.readable = False\n\n    # This will show the question submission log\n    form = SQLFORM(db.ocj_contests_log).process()\n    logs = db((db.ocj_contests_log.contestID == int(request.args[0])) & \\\n                (db.ocj_contests_log.questionNumber == int(request.args[1]))).\\\n                select(orderby=~db.ocj_contests_log.submissionTime)\n\n    contestID = request.args[0]\n    questionNumber = request.args[1]\n    if form.accepted:\n         redirect(URL(\'processSubmission\'))\n    return locals()\n\n\n\n#This function will be used to process the submission from here we can compile and run function\n@auth.requires_login()\ndef processSubmission():\n\n    qNumber = request.vars[\'questionNumber\']\n    cID = request.vars[\'contestID\']\n    cFile = request.vars[\'submissionFile\']\n    qName = request.vars[\'questionName\']\n\n    """\n    Insert record in the log table and make the submission status as evaluating\n    """\n    """ \n    And this will only happen if the page is came from last page not refreshed, \n    coz page refresh will insert duplicate page\n    """\n    CurrStatus = getFilePath()\n    if session.isFromChallengesPage == 1:\n        id = db.ocj_contests_log.insert(questionNumber = qNumber, contestID = cID, \\\n                                    code = cFile, questionName = qName, \\\n                                    userID = auth.user_id, submissionTime = request.now, \\\n                                    submissionResult = CurrStatus)\n        session.isFromChallengesPage = 0\n\n\n\n    rows = db((db.ocj_contests_log.contestID == cID) & \\\n                (db.ocj_contests_log.questionNumber == qNumber) &\n                (db.ocj_contests_log.userID == auth.user_id)).\\\n                select(orderby=~db.ocj_contests_log.submissionTime)\n\n\n\n    return locals()\n\n\n\n@auth.requires_login()\n@auth.requires_membership(\'host_admin\')\ndef manage():\n    grid = SQLFORM.grid(db.ocj_contests)\n    return locals()\n\n\n@auth.requires_login()\n@auth.requires_membership(\'host_admin\')\n#This view will be used for hosting the contest\ndef hostcontest():\n    session.wasOnAddContestForm = 1\n    #Set the current logged in user id as the hosted by user id\n    return dict(form=SQLFORM(db.ocj_contests).process())\n\n\n@auth.requires_login()\n@auth.requires_membership(\'host_admin\')\n#This will be intermediate function for hosting the contest\ndef addcontest():\n    \n    """\n    This session variable will check if any user directly landed on this page or not\n    if he didnt come from last page then redirect him on the last page and ask to name the\n    contest first\n    """\n    if session.wasOnAddContestForm != 1:\n       redirect(URL(\'hostcontest\'))\n\n    session.wasOnAddContestForm = 0     \n    """\n    Get the varilable from the last page and inser it into the database and get the id in return\n    """\n    CName = request.vars[\'contestName\']\n    ETime = request.vars[\'endTime\']\n    STime = request.vars[\'startTime\']\n    id = db.ocj_contests.insert(contestName=CName, endTime=ETime, startTime=STime, hostedBy=auth.user_id)\n\n    return locals()\n\n\ndef addContestDetails():\n\n    contestID = request.vars[\'contestID\']\n    questionNumber = request.vars[\'questionNumber\']\n    questionName = request.vars[\'questionName\']\n    contestName = request.vars[\'contestpage\']   \n    questionText_1 = request.vars[\'questionText_1\']\n    noOfTestCases_1 = request.vars[\'noOfTestCases_1\']\n    testCase_1_1 = request.vars[\'testCase_1_1\']\n    testCaseAns_1_1 = request.vars[\'testCaseAns_1_1\']\n\n    id = db.ocj_contests_questions.insert(  contestID = contestID,   \\\n                                            questionNumber = questionNumber, \\\n                                            questionName = questionName, \\\n                                            questionText = questionText_1, \\\n                                            noOfTestCases = noOfTestCases_1, \\\n                                            testCase1 = testCase_1_1, \\\n                                            output1 = testCaseAns_1_1 )\n\n    return locals()\n\n\n\n\ndef getFilePath():\n    record = db(db.ocj_contests_log.userID == auth.user_id).select(orderby=~db.ocj_contests_log.submissionTime).first()\n    questionId = record[\'questionNumber\']\n    contestId = record[\'contestID\']\n    recordfromques = db( (db.ocj_contests_questions.questionNumber == questionId)\\\n                                        & (db.ocj_contests_questions.contestID==contestId) ).select().first()\n    testpathtemp = recordfromques[\'testCase1\']\n    testop = recordfromques[\'output1\']\n    k = record[\'code\']\n    filePath = os.path.join(request.folder,\'uploads\',k)\n    testpath = os.path.join(request.folder,\'uploads\',testpathtemp)\n    outputPath=os.path.join(request.folder,\'uploads\',testop)\n    scriptPath = os.path.join(request.folder,\'static/CodeJudge.sh\')\n    listRunStatus = list(commands.getstatusoutput("bash "+str(scriptPath)+" "+ str(filePath) +" "+ str(testpath) +" "+ str(outputPath) ))\n    runStatus = listRunStatus[1]\n\n    if "CTE" in runStatus:\n        CurrStatus = "Compile Time Error"\n    elif "Segmentation" in runStatus :\n        CurrStatus = "Segmentation Fault"\n    elif "RTE" in runStatus :\n        CurrStatus = "Run Time Error"\n    elif "Wrong" in runStatus :\n        CurrStatus = "Wrong Answer"\n    elif "Accepted" in runStatus :\n        CurrStatus = "Accepted"\n    else:\n        CurrStatus = "Time Limit Exceeded"\n    #Update the Submission STatus of the submitted code\n    #0-Success 1-CTE 2-RTE 3-TLE\n    #row = db(db.ocj_contests_log.userID==auth.user_id).select(orderby=~db.ocj_contests_log.submissionTime).first()\n    #row.update_record(submissionResult=CurrStatus)\n    #eturn locals()\n    return CurrStatus\n\n\n\n\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(processSubmission)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/applications/code_gb/controllers/default.py", line 297, in <module>\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/applications/code_gb/controllers/default.py", line 134, in processSubmission\n    CurrStatus = getFilePath()\n  File "/home/md/Documents/Scripting/projWeb2py/web2py/web2py/applications/code_gb/controllers/default.py", line 226, in getFilePath\n    testpathtemp = recordfromques[\'testCase1\']\nTypeError: \'NoneType\' object has no attribute \'__getitem__\'\n'
p11
s.